/*! normalize.css v3.0.1 | MIT License | git.io/normalize */

html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%;}body{margin:0;}article,aside,details,figcaption,figure,footer,header,hgroup,main,nav,section,summary{display:block;}audio,canvas,progress,video{display:inline-block;vertical-align:baseline;}audio:not([controls]){display:none;height:0;}[hidden],template{display:none;}a{background:transparent;}a:active,a:hover{outline:0;}abbr[title]{border-bottom:1px dotted;}b,strong{font-weight:bold;}dfn{font-style:italic;}h1{font-size:2em;margin:0.67em 0;}mark{background:#ff0;color:#000;}small{font-size:80%;}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline;}sup{top:-0.5em;}sub{bottom:-0.25em;}img{border:0;}svg:not(:root){overflow:hidden;}figure{margin:1em 40px;}hr{-moz-box-sizing:content-box;box-sizing:content-box;height:0;}pre{overflow:auto;}code,kbd,pre,samp{font-family:monospace,monospace;font-size:1em;}button,input,optgroup,select,textarea{color:inherit;font:inherit;margin:0;}button{overflow:visible;}button,select{text-transform:none;}button,html input[type="button"],input[type="reset"],input[type="submit"]{-webkit-appearance:button;cursor:pointer;}button[disabled],html input[disabled]{cursor:default;}button::-moz-focus-inner,input::-moz-focus-inner{border:0;padding:0;}input{line-height:normal;}input[type="checkbox"],input[type="radio"]{box-sizing:border-box;padding:0;}input[type="number"]::-webkit-inner-spin-button,input[type="number"]::-webkit-outer-spin-button{height:auto;}input[type="search"]{-webkit-appearance:textfield;-moz-box-sizing:content-box;-webkit-box-sizing:content-box;box-sizing:content-box;}input[type="search"]::-webkit-search-cancel-button,input[type="search"]::-webkit-search-decoration{-webkit-appearance:none;}fieldset{border:1px solid #c0c0c0;margin:0 2px;padding:0.35em 0.625em 0.75em;}legend{border:0;padding:0;}textarea{overflow:auto;}optgroup{font-weight:bold;}table{border-collapse:collapse;border-spacing:0;}td,th{padding:0;}

// Transition
@mixin transition($elements:all,$secs:0.5s,$delay:0s) {
	-webkit-transition: $elements $secs ease-in-out $delay;
	-moz-transition: $elements $secs ease-in-out $delay;
	-ms-transition: $elements $secs ease-in-out $delay;
	-o-transition: $elements $secs ease-in-out $delay;
	transition: $elements $secs ease-in-out $delay;
	-webkit-transition-timing-function: cubic-bezier(0.590, 0.005, 0.000, 1.000); /* older webkit */
	-webkit-transition-timing-function: cubic-bezier(0.590, 0.005, 0.000, 1.000);
	   -moz-transition-timing-function: cubic-bezier(0.590, 0.005, 0.000, 1.000);
	    -ms-transition-timing-function: cubic-bezier(0.590, 0.005, 0.000, 1.000);
	     -o-transition-timing-function: cubic-bezier(0.590, 0.005, 0.000, 1.000);
	        transition-timing-function: cubic-bezier(0.590, 0.005, 0.000, 1.000); /* custom */
}

// Animation

@mixin animation($name:myAnim,$secs:0.5s,$delay:0s, $iteration: 1, $direction: normal, $easing: cubic-bezier(0.590, 0.005, 0.000, 1.000)) {
	-webkit-animation: $name $secs $easing $delay $iteration $direction;
	-moz-animation: $name $secs $easing $delay $iteration $direction;
	-ms-animation: $name $secs $easing $delay $iteration $direction;
	-o-animation: $name $secs $easing $delay $iteration $direction;
	animation: $name $secs $easing $delay $iteration $direction;
	-webkit-animation-fill-mode: both;
	-moz-animation-fill-mode: both;
	-ms-animation-fill-mode: both;
	-o-animation-fill-mode: both;
	animation-fill-mode: both;
}

// Keyframes
@mixin keyframes($name) {
	@-webkit-keyframes #{$name} {
	@content;
	}
	@-moz-keyframes #{$name} {
	@content;
	}
	@-ms-keyframes #{$name} {
	@content;
	}
	@keyframes #{$name} {
	@content;
	}
}

@mixin placeholder {
    &::-webkit-input-placeholder {
        @content;
    }
    &:-moz-placeholder {
        @content;
    }
    &::-moz-placeholder {
        @content;
    }
    &:-ms-input-placeholder {
        @content;
    }
}


// Transform

// CSS Arrows
 @mixin arrow($width: 20px, $height: 20px, $direction: up, $color: red) { 
	  width: 0;
	  height: 0;
 
	  // Right
	  @if $direction == right {
	    border-top: $height/2 solid transparent;
	    border-bottom: $height/2 solid transparent;
	    border-left: $width solid $color;
		}
	  // Left
	  @if $direction == left {
	    border-top: $height/2 solid transparent;
	    border-bottom: $height/2 solid transparent;
	    border-right: $width solid $color;
		}
	  // Up
	  @if $direction == up {
	    border-left: $width/2 solid transparent;
	    border-right: $width/2 solid transparent;
	    border-bottom: $height solid $color;
		}
	  // Down
	  @if $direction == down {
	    border-left: $width/2 solid transparent;
	    border-right: $width/2 solid transparent;
	    border-top: $height solid $color;
	    }
    }
    
/////////////////
// Semantic.gs // for SCSS: http://sass-lang.com/
/////////////////

// Defaults which you can freely override
$column-width: 60px;
$gutter-width: 20px;
$columns: 12;

// Utility function â€” you should never need to modify this
@function gridsystem-width($columns:$columns) {
	@return ($column-width * $columns) + ($gutter-width * $columns);
}

// Set $total-width to 100% for a fluid layout
$total-width: 100%;

// Uncomment these two lines and the star-hack width/margin lines below to enable sub-pixel fix for IE6 & 7. See http://tylertate.com/blog/2012/01/05/subpixel-rounding.html
// $min-width: 999999;
// $correction: 0.5 / $min-width * 100;

// The micro clearfix http://nicolasgallagher.com/micro-clearfix-hack/
@mixin clearfix() {
	*zoom:1;

	&:before,
	&:after {
	    content:"";
	    display:table;
	}
	&:after {
	    clear:both;
	}
}


//////////
// GRID //
//////////

body {
	width: 100%;
	@include clearfix();
}

@mixin row($columns:$columns) {
	display: block;
	width: $total-width*(($gutter-width + gridsystem-width($columns))/gridsystem-width($columns));
	margin: 0 $total-width*((($gutter-width*.5)/gridsystem-width($columns))*-1);
	// *width: $total-width*(($gutter-width + gridsystem-width($columns))/gridsystem-width($columns))-$correction;
	// *margin: 0 $total-width*((($gutter-width*.5)/gridsystem-width($columns))*-1)-$correction;
	@include clearfix();
}
@mixin column($x,$columns:$columns) {
	display: inline;
	float: left;
	width: $total-width*(((($gutter-width+$column-width)*$x)-$gutter-width) / gridsystem-width($columns));
	margin: 0 $total-width*(($gutter-width*.5)/gridsystem-width($columns));
	// *width: $total-width*(((($gutter-width+$column-width)*$x)-$gutter-width) / gridsystem-width($columns))-$correction;
	// *margin: 0 $total-width*(($gutter-width*.5)/gridsystem-width($columns))-$correction;
}
@mixin push($offset:1) {
	margin-left: $total-width*((($gutter-width+$column-width)*$offset) / gridsystem-width($columns)) + $total-width*(($gutter-width*.5)/gridsystem-width($columns));
}
@mixin pull($offset:1) {
	margin-right: $total-width*((($gutter-width+$column-width)*$offset) / gridsystem-width($columns)) + $total-width*(($gutter-width*.5)/gridsystem-width($columns));
}

// Baseline grid
$body-width: 960px;
$baseline: 6px;

@mixin baseline-grid-columns {
	$column-color: rgba(200,0,0,.2);
	$baseline-color: rgba(56,255,255,.8);
	// These are all automatically calculated
	$gutters: ($columns - 1);
	background-image: -webkit-linear-gradient(0deg, $column-color $column-width, transparent $gutter-width*.5),
	-webkit-linear-gradient(top, rgba(0,0,0,0) 95%, $baseline-color 100%);
	background-image: -moz-linear-gradient(0deg, $column-color $column-width, transparent $gutter-width*.5),
	-moz-linear-gradient(top, rgba(0,0,0,0) 95%, $baseline-color 100%);
	background-image: -o-linear-gradient(0deg, $column-color $column-width, transparent $gutter-width*.5),
	-o-linear-gradient(top, rgba(0,0,0,0) 95%, $baseline-color 100%);
	background-size: ($column-width + $gutter-width) 100%, 100% $baseline;
	background-position: 10px 0px; // Use to offset and center your grid
}
@mixin baseline-grid {
	$baseline-color: rgba(56,255,255,1);
	// These are all automatically calculated
	background-image: -webkit-linear-gradient(top, rgba(0,0,0,0) 90%, $baseline-color 100%);
	background-image: -moz-linear-gradient(top, rgba(0,0,0,0) 85%, $baseline-color 100%);
	background-image: -o-linear-gradient(top, rgba(0,0,0,0) 90%, $baseline-color 100%);
	background-size: 100% $baseline;
	background-position: 10px 0px; // Use to offset and center your grid
}

// GRID

div#utility-grid {
	@include baseline-grid;
	position: absolute;
	width: 100%;
	height: 9999px;
	z-index: 999999;
	pointer-events: none;
	div {
		height: 100%;
	}
	span {
		display: block;
		height: 100%;
		@include column(1);
		background: #FF0000;
		opacity: 0.3;
		box-shadow: 0 0 1px #000;
	}
}